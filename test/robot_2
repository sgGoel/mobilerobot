// this is C++ but i'm just saving something locally
// Version 2! will include "functions" that call the position

#include <Arduino.h>
#include "remote.h"
#include "MotorDriver.h"

// get these values right!!!
#define DIR_PIN_FM1 34
#define PWM_PIN_FM1 7
//#define LEDC_CHANNEL_FM1 0
#define DIR_PIN_FM2 3
#define PWM_PIN_FM2 6
//#define LEDC_CHANNEL_FM2 1
#define DIR_PIN_RM1 39
#define PWM_PIN_RM1 41
//#define LEDC_CHANNEL_RM1 2
#define DIR_PIN_RM2 40
#define PWM_PIN_RM2 42
//#define LEDC_CHANNEL_RM2 3

// motor PWMs
double pwm_0; // backwards
double pwm_1;
double pwm_2;
double pwm_3; //backwards

// switch mode booleans
bool nav_mode = false;
bool man_mode = false;


// nav mode booleans
bool forward = false;
bool backward = false;
bool turning_CCW = false;
bool turning_CW = false;
bool strafe_L = false;
bool strafe_R = false;
double min_val = 0.2;

// Initialize the motor driver object with DIR and PWM pin numbers and LEDC channel
// F is front, R is rear
// MotorDriver FM1(DIR_PIN_FM1, PWM_PIN_FM1, LEDC_CHANNEL_FM1);
// MotorDriver FM2(DIR_PIN_FM2, PWM_PIN_FM2, LEDC_CHANNEL_FM2);
// MotorDriver RM1(DIR_PIN_RM1, PWM_PIN_RM1, LEDC_CHANNEL_RM1);
// MotorDriver RM2(DIR_PIN_RM2, PWM_PIN_RM2, LEDC_CHANNEL_RM2);

MotorDriver motors[4] = { {DIR_PIN_RM1, PWM_PIN_RM1, 0}, {DIR_PIN_RM2, PWM_PIN_RM2, 1},
                                   {DIR_PIN_FM1, PWM_PIN_FM1, 2}, {DIR_PIN_FM2, PWM_PIN_FM2, 3} };

                                   // 0123 stating front right wheel and moving CCW

void setup() {
  ums3.begin();

  //initPeripherals();
  //initRotary();  
  Serial.println("Starting!");
  delay(1000);
  initReceiver();
  // Initialize serial communication
  Serial.begin();

  // Setup the motor driver
  for (uint8_t i = 0; i < 4; i++) {
      motors[i].setup();
  }
  // ADDED
  /*
  //setup the motor objects
  FM1.setup();
  FM2.setup();
  RM1.setup();
  RM2.setup();*/
}


void loop() {
  //readJoysticks();
  //readSwitches();
  //readRotary();
  
  //sendData(); // Sends data using ESP-NOW to reciever
  printData();  // Prints data via serial port
  delay(20);

  // ADDED

  // test, all forward, 50% pwm
  // motors[0].drive(-0.5);
  // motors[1].drive(-0.5);
  // motors[2].drive(0.5);
  // motors[3].drive(0.5);

  // WHERE THE GOOD STUFF STARTS
  if(data.swch1){
    //Serial.println("Switching to Nav Mode");
    man_mode = false;
    nav_mode = true;
    pwm_0=0;
    pwm_1=0;
    pwm_2=0;
    pwm_3=0;
  }
  if(data.swch2){
    //Serial.print("Switching to Man Mode");
    man_mode = true;
    nav_mode = false;
    pwm_0=0;
    pwm_1=0;
    pwm_2=0;
    pwm_3=0;
  }
  pwm_0=0;
  pwm_1=0;
  pwm_2=0;
  pwm_3=0;
  // // when in man_mode
  // if(man_mode){
  //   Serial.println("you're in man mode!");
  // }

  // when in nav_mode
  if(nav_mode){
    //Serial.println("you're in nav mode!");

    // forward or backward, left Y joystick
    if(data.leftY > 0.2 or data.leftY < -0.2){
      Serial.println("Forward/Backward");
      pwm_0 += data.leftY/3;
      pwm_1 += data.leftY/3;
      pwm_2 += data.leftY/3;
      pwm_3 += data.leftY/3;
    }
    // strafe, left X joystick
    if(data.leftX > 0.2 or data.leftX < -0.2){
      Serial.println("Strafing");
      pwm_0 += -data.leftX/3;
      pwm_1 += data.leftX/3;
      pwm_2 += -data.leftX/3;
      pwm_3 += data.leftX/3;

    }
    // turn, right X joystick
    if(data.rightX > 0.2 or data.rightX < -0.2){
      Serial.println("Turning");
      pwm_0 += -data.rightX/3;
      pwm_1 += data.rightX/3;
      pwm_2 += data.rightX/3;
      pwm_3 += -data.rightX/3;
    }
    Serial.println(pwm_0);
    Serial.println(pwm_1);
    Serial.println(pwm_2);
    Serial.println(pwm_3);
    motors[0].drive(-pwm_0);
    motors[1].drive(-pwm_1);
    motors[2].drive(pwm_2);
    motors[3].drive(pwm_3);

  }
  
}

/* 
//wite a function for f/b, l/r, cw/ccw called PIDfb(current, ref) , PIDlr(current, ref), PIDcwccw(current, ref)

this function would control the speed
we would have a separate machine checking the current position vs. the desired position to determine when to stop navigating, and that might even set the velocity setpoint
every new step, reset the errors, derivative and integral, etc.
don't use a delay command, use a timer within nav mode that is constantly calling PID for straight movement, strafing, and rotation!!

deriv_error = ((ref-current) - error)/dt

int_error += error*dt

error = ref - current

d_pwm = K_d * deriv_error + K_i * int_error + K_p * error

pwm_i += d_pwm




*/